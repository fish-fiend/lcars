% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{lcarsToggle}
\alias{lcarsToggle}
\title{LCARS toggle button}
\usage{
lcarsToggle(inputId, label, value = FALSE, pill = FALSE,
  inverse = FALSE, true = "Yes", false = "No",
  true_color = "dodger-pale", false_color = "atomic-tangerine",
  background_color = "#000000", border_color = ifelse(inverse,
  false_color, background_color), outer_border = FALSE,
  outer_color = "#000000", label_color = "#FFFFFF",
  label_right = FALSE, width = "150px")
}
\arguments{
\item{inputId}{The input slot that will be used to access the value.}

\item{label}{Display label for the control, or NULL for no label.}

\item{value}{logical, initial value.}

\item{pill}{logical, use an LCARS pill style with rounded ends instead of the default rounded rectangle.}

\item{inverse}{logical, invert the color presentation.}

\item{true}{character, text label for \code{TRUE} position.}

\item{false}{character, text label for \code{FALSE} position.}

\item{true_color}{Color for \code{TRUE} position. Can be any color given in hex format. Named colors must be LCARS colors. See \code{\link{lcarsColors}} for options.}

\item{false_color}{Color for \code{FALSE} position, as above.}

\item{background_color}{background color, as above.}

\item{border_color}{border color, as above.}

\item{outer_border}{logical, use outer border. This makes some adjustments to inner elements if used.}

\item{outer_color}{outer border color, as above.}

\item{label_color}{label text color, as above.}

\item{label_right}{logical, set to \code{TRUE} to right align label text.}

\item{width}{character, valid CSS unit, e.g. \code{"100px"}. Using a percentage works, but not as well. Fixed widths recommended.}
}
\value{
a toggle button control that can be added to a UI
}
\description{
An LCARS styled toggle button that can be used in place of \code{checkboxInput}.
}
\examples{
if(interactive()){
  ui <- lcarsPage(
    lcarsToggle("somevalue", "Some value", FALSE),
    verbatimTextOutput("value")
  )
  server <- function(input, output) {
    output$value <- renderText({ input$somevalue })
  }
  shinyApp(ui, server)
}
}
